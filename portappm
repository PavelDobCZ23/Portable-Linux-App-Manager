#!/bin/bash
#* portappm *#
#* url of the github repo where is the central app database located
DATABASE_API_URL="https://api.github.com/repos/PavelDobCZ23/Portable-Linux-App-Manager/contents/database"
#* directory where the subdirectories of apps' files are located, value of -d arg
APPS_DIRECTORY=""
#* value of -c arg
COMMAND=""
#* global variable used to indicate the name of the app in current context, all functions should use it as their target, value of -a arg
APP_NAME=""
#* true when -f arg is used
FORCE_OPTION=false

# Get cli flags
while getopts "fc:a:d:" OPT; do
  case "${OPT}" in
    a)
      APP_NAME="${OPTARG}"
      ;;
    c)
      COMMAND="${OPTARG}"
      ;;
    d)
      APPS_DIRECTORY="${OPTARG}"
      ;;
    f)
      FORCE_OPTION=true
      ;;
    *)
      echo "Fatal Error! Invalid flag '${OPT}' found!" && exit 1
  esac
done

# ## Parse main directory with applications
if [[ -z $APPS_DIRECTORY ]]; then APPS_DIRECTORY="$HOME/Apps"; fi
if [[ ${APPS_DIRECTORY:0-1} == "/" ]]; then APPS_DIRECTORY="${APPS_DIRECTORY%?}"; fi
if [[ ! -d $APPS_DIRECTORY ]]; then
  echo "'$APPS_DIRECTORY' doesn't exist!" && exit 1
fi

# # Basic functions 

send_info() { echo "$APP_NAME | $1"; }
send_error() { send_info "$1" && exit 1; }

# Gets the depth of a given path
path_depth() {
    local CHECK_PATH="$1"
    local DEPTH_COUNT=0
    # shellcheck disable=SC2001
    CHECK_PATH=$(echo "$CHECK_PATH" | sed 's/\/*$//')
    DEPTH_COUNT=$(echo "$CHECK_PATH" | awk -F'[^/]*/+' '{print NF-1}')
    if [[ DEPTH_COUNT -lt 0 ]]; then DEPTH_COUNT=0; fi
    echo "$DEPTH_COUNT"
}

# Removes given folder, but prevents dangerous rm -rf!
remove_folder () {
  local REMOVE_PATH="$1"
  if [[ $(path_depth "$REMOVE_PATH") -lt 3 ]]; then
    echo "Can't remove '$REMOVE_PATH', dangerous 'rm -rf' detected!"
  else
    echo "Removing '$REMOVE_PATH'."
    rm -rf "$REMOVE_PATH"
  fi
}

# Returns with fail(1) if any of the required files are missing, otherwise returns with success(0)
check_valid_app () {
  local CHECK_APP_NAME="$1"
  local CHECK_APP_DIR="$APPS_DIRECTORY/$APP_NAME"
  if [[ ! -f "$CHECK_APP_DIR/app.conf" ]]; then
    echo "$CHECK_APP_NAME | app.conf not found!" && return 1
  elif [[ ! -f "$CHECK_APP_DIR/app.desktop" ]]; then
    echo "$CHECK_APP_NAME | app.desktop not found!" && return 1
  elif [[ ! -x "$CHECK_APP_DIR/app-update.sh" ]]; then
    echo "$CHECK_APP_NAME | app-update.sh not executable!" && return 1
  fi;
  return 0
}

# Process line of a config file and emit the result with $SECTION and $SUBSECTION or $KEY and $VALUE
process_config_line () {
  local CONFIG_LINE="$1"
  if [[ $CONFIG_LINE =~ ^\ *\[.*\] ]]; then # Regex that checks for characters between []
    CONFIG_LINE=$(echo "$CONFIG_LINE" | sed 's/ *\[ */[/g; s/ *] */]/g') # Remove spaces around []
    SECTION=$(echo "$CONFIG_LINE" | awk -F'[][]+' '{print $2}') # Get the main section
    SUBSECTION=$(echo "$CONFIG_LINE" | awk -F'[][]+' '{print $3}') # Get the subsection
    return 1
  fi
  # Read Key-Value pairs
  KEY=$(echo "$CONFIG_LINE" | awk -F' *=' '{print $1}' | sed 's/^[[:space:]]*//')
  if [[ -z $KEY || $CONFIG_LINE =~ ^\ *\#.*$ || ! $CONFIG_LINE =~ \= ]]; then return 1; fi # Skip an empty key, a comment or missing "="
  VALUE=$(
    echo "$CONFIG_LINE" | awk -F: '{n=index($0,"=");print substr($0,n+1)}' | # Splits by the 1st "=" and returns the 2nd half
    sed 's/[[:space:]]*$//' | sed 's/^[[:space:]]*//' # Removes trailing spaces
  )
  return 0
}

# Reads the config file of the app and saves the configuration into global variables.
read_app_config () {
  local CONFIG_APP_NAME="$1"
  local CONFIG_FILE="$APPS_DIRECTORY/$CONFIG_APP_NAME/app.conf"
  local LINE=""
  while IFS= read -r LINE; do
    process_config_line "$LINE"
    # Save values in config into variables
    if [[ $SECTION == "General" && -z $SUBSECTION ]]; then
      if [[ $KEY == "Bin" ]];then BIN_PATH=$VALUE;fi
      if [[ $KEY == "Type" ]];then APP_TYPE=$VALUE;fi
      if [[ $KEY == "ExtractFolder" ]];then EXTRACT_FOLDER=$VALUE;fi
      if [[ $KEY == "ArchiveStrip" ]];then ARCHIVE_STRIP=$VALUE;fi
      if [[ $KEY == "RemoveBeforeUpdate" ]];then RM_BEFORE_UPDATE=$VALUE;fi
      if [[ $KEY == "DisableUpdates" ]];then DISABLE_UPDATES=$VALUE;fi
      if [[ $KEY == "ForceVersion" ]];then FORCE_VERSION=$VALUE;fi
    fi
  done < <(grep "" "$CONFIG_FILE")
}

# Echos config entry value. Takes: app name($1), section($2), subsection($3) and key($4).
get_app_config () {
  local CONFIG_APP_NAME="$1"
  local CONFIG_FILE="$APPS_DIRECTORY/$CONFIG_APP_NAME/app.conf"
  local LINE=""
  while IFS= read -r LINE; do
    if ! process_config_line "$LINE"; then continue; fi
    if [[ $SECTION == "$2" && $SUBSECTION == "$3" && $KEY == "$4" ]]; then echo "$VALUE" && return 0; fi
  done < <(grep "" "$CONFIG_FILE")
}

# Echos executable of the app. Takes: app name($1), config subsection($2).
get_app_executable () {
  local EXEC_APP_NAME SUBSECTION BIN_PATH EXEC_ARGS EXEC_ENV EXEC_PRE_LAUNCH ENV_STRING EXEC_PATH
  EXEC_APP_NAME="$1"
  SUBSECTION="$2"
  BIN_PATH=$(get_app_config "$EXEC_APP_NAME" "General" "" "Bin")
  EXEC_ARGS=$(get_app_config "$EXEC_APP_NAME" "Desktop" "$SUBSECTION" "Arguments")
  EXEC_ENV=$(get_app_config "$EXEC_APP_NAME" "Desktop" "$SUBSECTION" "EnvVariables")
  EXEC_PRE_LAUNCH=$(get_app_config "$EXEC_APP_NAME" "Desktop" "$SUBSECTION" "PreLaunch")
  if [[ -n $EXEC_ENV ]]; then ENV_STRING="env $EXEC_ENV"; fi
  EXEC_PATH="$APPS_DIRECTORY/$EXEC_APP_NAME/$BIN_PATH"
  echo "$ENV_STRING $EXEC_PRE_LAUNCH '$EXEC_PATH' $EXEC_ARGS"
}

# Echos icon of the app. Takes: app name($1), config subsection($2).
get_app_icon () {
  local ICON_APP_NAME SUBSECTION ICON_CONFIG
  ICON_APP_NAME="$1"
  SUBSECTION="$2"
  ICON_CONFIG=$(get_app_config "$ICON_APP_NAME" "Desktop" "$SUBSECTION" "Icon")
  if [[ $ICON_CONFIG =~ ^\.\/ ]]; then
    ICON_CONFIG="$APPS_DIRECTORY/$ICON_APP_NAME/${ICON_CONFIG:2}"
  fi
  echo "$ICON_CONFIG"
}

# Echos path of the app. Takes: app name($1).
get_app_path () {
  local PATH_APP_NAME PATH_CONFIG
  PATH_APP_NAME="$1"
  PATH_CONFIG=$(get_app_config "$PATH_APP_NAME" "Desktop" "" "Path")
  if [[ -z $PATH_CONFIG ]]; then echo "$APPS_DIRECTORY/$PATH_APP_NAME"; fi
  if [[ $PATH_CONFIG =~ ^\.\/ ]]; then
    PATH_CONFIG="$APPS_DIRECTORY/$PATH_APP_NAME/${PATH_CONFIG:2}"
  fi
  echo "$PATH_CONFIG"
  
}

# # Command functions
# ## Checks for available updates to the binary and updates it if possible
update_app () {
  local APP_DIR VERSION_FILE INSTALLED_VERSION RM_BEFORE_UPDATE ARCHIVE_STRIP UPDATE_SCRIPT EXTRACT_PATH
  # Check if app's valid
  if ! check_valid_app "$APP_NAME"; then 
    echo "$APP_NAME | Not a valid app, can't update!"
    return 1
  fi
  # Prepare variables
  APP_DIR="$APPS_DIRECTORY/$APP_NAME"
  VERSION_FILE="$APP_DIR/.version"
  INSTALLED_VERSION=$(awk 'NR==1{ print; exit }' "$VERSION_FILE") # Gets the 1st line of .version file
  RM_BEFORE_UPDATE=false
  ARCHIVE_STRIP=0
  UPDATE_SCRIPT="$APP_DIR/app-update.sh"
  # Get variables from a config file
  read_app_config "$APP_NAME"
  if [[ "$FORCE_OPTION" = false && "$DISABLE_UPDATES" = true ]]; then
    echo "$APP_NAME | Updates are disabled in 'app.conf' for this app. Use -f to force the update."
    return 0
  fi
  if [[ -z $BIN_PATH ]]; then
    send_error "Configuration failure! 'General.Exec' is not set! Make sure to set it to a valid file name!"
  fi
  # Check if newer version is available
  LATEST_VERSION="$("$UPDATE_SCRIPT" -v)"
  if [[ -z $LATEST_VERSION ]]; then # Handle empty error
    send_error "Failed to get the latest version of the app!"
  fi
  if [[ $LATEST_VERSION =~ ^Fatal\ Error\!.*$ ]]; then # Handle errors
    send_error "$LATEST_VERSION"
  fi
  if [[ "$INSTALLED_VERSION" == "$LATEST_VERSION" ]]; then
    echo "$APP_NAME | Up To Date! Version: $LATEST_VERSION"
    return 0
  fi
  # Continue if an update is available
  echo "$APP_NAME | New version found! $LATEST_VERSION (Installed version: $INSTALLED_VERSION)"
  DOWNLOAD_URL="$("$UPDATE_SCRIPT" -u)"
  if [[ -z $DOWNLOAD_URL ]]; then # Handle empty error
    send_error "Failed to get the download URL for the app!"
  fi
  if [[ $DOWNLOAD_URL =~ ^Fatal\ Error\!.*$ ]]; then # Handle errors
    send_error "$DOWNLOAD_URL"
  fi

  # Download the update and return if it fails
  echo "$APP_NAME | Downloading new version from '$DOWNLOAD_URL'."
  TEMP_FILE="$APP_DIR/temp-download-file"
  FULL_BIN_PATH="$APP_DIR/$BIN_PATH"
  if ! wget --progress bar "$DOWNLOAD_URL" -O "$TEMP_FILE"; then
    send_error "Failed to download."
  fi

  # Remove Before Update
  if [[ "$RM_BEFORE_UPDATE" = true ]]; then
    echo "$APP_NAME | Removing binary file(s) before updating."
    rm -f "$APP_DIR/$BIN_PATH"
    if [[ -n $EXTRACT_FOLDER ]]; then
      REMOVE_PATH="$APP_DIR/$EXTRACT_FOLDER"
      remove_folder "$REMOVE_PATH"
    fi
  fi

  # Extract the downloaded file
  if [[ "$APP_TYPE" == "SingleBin" ]]; then
    echo "$APP_NAME | Saving the update binary to '$FULL_BIN_PATH'."
    mv -f "$TEMP_FILE" "$FULL_BIN_PATH"
  elif [[ "$APP_TYPE" == "BinArchive" ]]; then
    EXTRACT_PATH="$APP_DIR"
    if [[ -n $EXTRACT_FOLDER ]]; then EXTRACT_PATH="$APP_DIR/$EXTRACT_FOLDER"; fi
    if [[ ! -d $EXTRACT_PATH ]]; then mkdir -p "$EXTRACT_PATH"; fi
    echo "$APP_NAME | Extracting the update archive to '$EXTRACT_PATH'."
    tar -xf "$TEMP_FILE" -C "$EXTRACT_PATH" --strip "$ARCHIVE_STRIP" --overwrite
    rm -f "$TEMP_FILE"
  else
    rm -f "$TEMP_FILE"
    send_error "Configuration failure! 'General.Type' is set to an unrecognised value - '$APP_TYPE' Allowed values: 'SingleBin','BinArchive'"
  fi

  # Finishing up
  echo "$APP_NAME | Setting executable permissions for the binary and saving the installed version."
  chmod +x "$FULL_BIN_PATH"
  echo "$LATEST_VERSION" > "$VERSION_FILE"
  if [[ -x "$APP_DIR/app-install.sh" ]]; then "$APP_DIR/app-install.sh"; fi # Run custom post-install script
  echo "$APP_NAME | Done updating!"
}

app_desktop () {
  local BASE_DESKTOP_FILE DESKTOP_FILE_DIR OUTPUT_DESKTOP_FILE LINE LAST_SECTION
  # Check if the app's valid
  if ! check_valid_app "$APP_NAME"; then 
    send_error "Not a valid app, can't generate .desktop file!"
  fi
  # Prepare variables
  BASE_DESKTOP_FILE="$APPS_DIRECTORY/$APP_NAME/app.desktop"
  DESKTOP_FILE_DIR="$HOME/.local/share/applications/Portable"
  OUTPUT_DESKTOP_FILE="$DESKTOP_FILE_DIR/$APP_NAME.desktop"
  LINE=""
  LAST_SECTION=""
  # Go through each line of the base desktop file
  echo "" > "$OUTPUT_DESKTOP_FILE"
  while IFS= read -r LINE; do
    if ! process_config_line "$LINE"; then continue; fi
    # Process sections
    if [[ $LAST_SECTION != "$SECTION" ]]; then
      LAST_SECTION="$SECTION"
      if [[ $(wc -l "$OUTPUT_DESKTOP_FILE" | awk '{print $1}') -gt 1 ]]; then echo "" >> "$OUTPUT_DESKTOP_FILE"; fi
      echo "[$SECTION]" >> "$OUTPUT_DESKTOP_FILE"
      if [[ $SECTION == "Desktop Entry" ]]; then
        {
          echo "Type=Application"
          echo "Exec=$(get_app_executable "$APP_NAME")"
          echo "Icon=$(get_app_icon "$APP_NAME")"
          echo "Path=$(get_app_path "$APP_NAME")"
        } >> "$OUTPUT_DESKTOP_FILE"
      elif [[ $SECTION =~ ^Desktop\ Action\ .*$ ]]; then
        {
          echo "Exec=$(get_app_executable "$APP_NAME" "$SECTION")"
          echo "Icon=$(get_app_icon "$APP_NAME" "$SECTION")"
        } >> "$OUTPUT_DESKTOP_FILE"
      fi
    fi
    # Process entries
    if [[ $SECTION == "Desktop Entry" ]]; then
      if [[ $KEY == "Icon" || $KEY == "Exec" || $KEY == "Type" || $KEY == "Path" ]]; then continue; fi # Skip generated keys
    elif [[ $SECTION =~ ^Desktop\ Action\ .*$ ]]; then
      if [[ $KEY == "Exec" ]];then continue; fi
    fi
    echo "$KEY=$VALUE" >> "$OUTPUT_DESKTOP_FILE"
  done < <(grep "" "$BASE_DESKTOP_FILE")
}

# Refreshes the meta files of the app, syncing them with the repo's database.
refresh_app() {
  local APP_ID APP_DIR APP_DB_URL CONTENTS_DATA
  # Check if the app's valid
  if ! check_valid_app "$APP_NAME"; then 
    send_error "Not a valid app, can't refresh meta files!"
  fi
  # Prepare variables
  APP_ID=$(get_app_config "$APP_NAME" "General" "" "AppId") 
  APP_DIR="$APPS_DIRECTORY/$APP_NAME"
  APP_DB_URL="$DATABASE_API_URL/$APP_ID"
  # Get info about contents of the database
  CONTENTS_DATA=$(wget -qO- "$APP_DB_URL")
  if [[ -z $CONTENTS_DATA ]]; then
    send_error "Failed to download information about database contents from URL '$APP_DB_URL'!"
  fi
  # Download files based on the contents of the database
  echo "Downloading meta files from the repo's database."
  for FILE_DATA in $(echo "$CONTENTS_DATA" | jq -cr '.[]'); do
    FILE_NAME=$(echo "$FILE_DATA" | jq -r '.name')
    DOWNLOAD_URL=$(echo "$FILE_DATA" | jq -r '.download_url')
    echo "$FILE_NAME - $DOWNLOAD_URL"
    wget --progress bar "$DOWNLOAD_URL" -O "$APP_DIR/$FILE_NAME"
    if [[ $FILE_NAME =~ sh^ ]]; then 
      chmod +x "$APP_DIR/$FILE_NAME"
    fi # Make scripts executable
  done
  echo "Done! Meta files are now synced up with the latest in the repo's database."
}

refresh_all_apps () {
  local APP_PATH APP_BASENAME SUB_APP_PATH SUB_APP_NAME
  for APP_PATH in "$APPS_DIRECTORY"/*/; do
    if [ ! -d "$APP_PATH" ]; then continue; fi # Skip files
    APP_BASENAME="$(basename "$APP_PATH")"
    APP_NAME=$APP_BASENAME
    if check_valid_app "$APP_NAME"; then
      echo "Running refresh for app '$APP_NAME'."
      refresh_app
    else
      for SUB_APP_PATH in "$APP_PATH"/*/; do
        if [ ! -d "$SUB_APP_PATH" ]; then continue; fi # Skip files
        SUB_APP_NAME="$APP_NAME/$(basename "$SUB_APP_PATH")"
        APP_NAME=$SUB_APP_NAME
        if check_valid_app "$APP_NAME"; then
          echo "Running refresh for app '$APP_NAME'."
          refresh_app
        fi
      done
    fi
  done
}

update_all_apps () {
  local APP_PATH APP_BASENAME SUB_APP_PATH SUB_APP_NAME
  for APP_PATH in "$APPS_DIRECTORY"/*/; do
    if [ ! -d "$APP_PATH" ]; then continue; fi # Skip files
    APP_BASENAME="$(basename "$APP_PATH")"
    APP_NAME=$APP_BASENAME
    if check_valid_app "$APP_NAME"; then
      echo "Running update for app '$APP_NAME'."
      update_app
    else
      for SUB_APP_PATH in "$APP_PATH"/*/; do
        if [ ! -d "$SUB_APP_PATH" ]; then continue; fi # Skip files
        SUB_APP_NAME="$APP_NAME/$(basename "$SUB_APP_PATH")"
        APP_NAME=$SUB_APP_NAME
        if check_valid_app "$APP_NAME"; then
          echo "Running update for app '$APP_NAME'."
          update_app
        fi
      done
    fi
  done
}

all_app_desktop () {
  local APP_PATH APP_BASENAME SUB_APP_PATH SUB_APP_NAME
  for APP_PATH in "$APPS_DIRECTORY"/*/; do
    if [ ! -d "$APP_PATH" ]; then continue; fi # Skip files
    APP_BASENAME="$(basename "$APP_PATH")"
    APP_NAME=$APP_BASENAME
    if check_valid_app "$APP_NAME"; then
      echo "Generating .desktop file for app '$APP_NAME'."
      app_desktop 
    else
      for SUB_APP_PATH in "$APP_PATH"/*/; do
        if [ ! -d "$SUB_APP_PATH" ]; then continue; fi # Skip files
        SUB_APP_NAME="$APP_BASENAME/$(basename "$SUB_APP_PATH")"
        APP_NAME=$SUB_APP_NAME
        if check_valid_app "$APP_NAME"; then
          echo "Generating .desktop file for app '$APP_NAME'."
          app_desktop 
        fi
      done
    fi
  done
}

add_app () {
  local NEW_APP_DIR INPUT_APP_ID APP_DB_URL ALIASES_URL FINAL_APP_ID CONTENTS_DATA
  # Check for invalid subdirectory
  if [[ $(echo "$APP_NAME" | grep -o "/" | wc -l) -gt 1 ]]; then
    echo "App '$APP_NAME' subdirectory is too deep! Don't use more than a single '/'." && exit 1
  fi
  # Check for exisiting directories
  NEW_APP_DIR="$APPS_DIRECTORY/$APP_NAME"
  if [[ -d $NEW_APP_DIR ]]; then
    echo "App '$APP_NAME' can't be added, because '$NEW_APP_DIR' already exists!" && exit 1
  fi
  # Prepare variables
  INPUT_APP_ID="$(basename "$NEW_APP_DIR" | tr '[:upper:]' '[:lower:]' | tr ' _' '-')" # Gets name of the deepest directory and formats it to check in the database
  APP_DB_URL="$DATABASE_API_URL/$INPUT_APP_ID"
  ALIASES_URL="$DATABASE_API_URL/aliases.conf"
  FINAL_APP_ID=""
  # Create the directory
  echo "Creating new app in '$NEW_APP_DIR'."
  mkdir -p "$NEW_APP_DIR"
  # Resolve the final app id, possibly with aliases.
  if wget --spider -q "$APP_DB_URL"; then
    echo "Name '$INPUT_APP_ID' found in the database. Using its meta files from repo's database."
    FINAL_APP_ID="$INPUT_APP_ID"
  else
    echo "Name '$INPUT_APP_ID' not found in the database."
    ALIASES_DATA=$(wget -qO- "$ALIASES_URL")
    for LINE in $ALIASES_DATA; do 
      if [[ $LINE =~ (=|,)$INPUT_APP_ID($|,| ) ]]; then # Finds a line where app is found
        FINAL_APP_ID=$(echo "$LINE" | awk -F'=' '{ print $1 }') # Gets the id of the app (before =)
      fi
    done
    if [[ -n $FINAL_APP_ID ]]; then
      echo "Name '$INPUT_APP_ID' found as alias for '$FINAL_APP_ID'."
    else 
      echo "Name '$INPUT_APP_ID' not found as alias for any app, using default template."
      FINAL_APP_ID="default"
    fi
  fi
  APP_DB_URL="$DATABASE_API_URL/$FINAL_APP_ID"
  # Get info about contents of the database
  CONTENTS_DATA=$(wget -qO- "$APP_DB_URL")
  if [[ -z $CONTENTS_DATA ]]; then
    send_error "Failed to download information about database contents from URL '$APP_DB_URL'!"
  fi
  # Download files based on the contents of the database
  echo "Downloading meta files from the repo's database."
  for FILE_DATA in $(echo "$CONTENTS_DATA" | jq -cr '.[]'); do
    FILE_NAME=$(echo "$FILE_DATA" | jq -r '.name')
    DOWNLOAD_URL=$(echo "$FILE_DATA" | jq -r '.download_url')
    echo "$FILE_NAME - $DOWNLOAD_URL"
    wget --progress bar "$DOWNLOAD_URL" -O "$NEW_APP_DIR/$FILE_NAME"
    if [[ $FILE_NAME =~ \.sh^ ]]; then
      echo "Setting file '$APP_DIR/$FILE_NAME' as executable."
      chmod +x "$APP_DIR/$FILE_NAME"
    fi # Make scripts executable # Make scripts executable
  done
  # Finish!
  echo "Done! You can install the app with options: -c update -a '$APP_NAME'"
  if [[ "$FINAL_APP_ID" == "default" ]]; then
    echo "With the default template, make sure to update the 'app.conf', 'app-update.sh' and 'app.desktop' files first."
  fi
}

# Removes the app
remove_app () {
  # User confirm
  read -pr "$APP_NAME | Are you sure you want to remove this app? [y/N]: " CHOICE
  if [[ $CHOICE == "Y" || $CHOICE == "y" ]]; then
    echo "Removing..."
  elif [[ $CHOICE == "N" || $CHOICE == "n" || $CHOICE == "" ]]; then
    echo "Cancelled." && exit 0
  else
    echo "Invalid choice! Cancelled." && exit 1
  fi
  # Remove the app

  if [[ -x "$APP_DIR/app-remove.sh" ]]; then "$APP_DIR/app-remove.sh"; fi # Run custom post-remove script
  rm -f "$APP_DIR/app-remove.sh"
}

# Forces reinstallation of the app
reinstall_app () {
  if ! check_valid_app "$APP_NAME"; then 
    send_error "Not a valid app, can't reinstall!"
  fi
  read_app_config "$APP_NAME"
  echo "$APP_NAME | This process will remove the '.version' file and the app's binary file(s) and trigger update for the app to force its installation."
  rm -f "$APPS_DIRECTORY/$APP_NAME/.version"
  rm -f "$APPS_DIRECTORY/$APP_NAME/$BIN_PATH"
  if [[ -n $EXTRACT_FOLDER ]]; then
    REMOVE_PATH="$APPS_DIRECTORY/$APP_NAME/$EXTRACT_FOLDER"
    remove_folder "$REMOVE_PATH"
  fi
  update_app "$APP_NAME"
}

run_app () {
  APP_EXEC=$(get_app_executable "$APP_NAME")
  echo "Running:"
  echo "$APP_EXEC"
  eval "$APP_EXEC"
}

# # Selecting the command
if [[ $COMMAND = "run" ]]; then
  run_app
elif [[ "$COMMAND" = "update" ]]; then
  if [[ -z $APP_NAME ]]; then
    update_all_apps
  else
    update_app
  fi
elif [[ "$COMMAND" = "refresh" ]]; then
  if [[ -z $APP_NAME ]]; then
    refresh_all_apps
  else
    refresh_app
  fi
elif [[ "$COMMAND" = "add" ]]; then
  add_app
elif [[ "$COMMAND" = "reinstall" ]]; then
  reinstall_app
elif [[ "$COMMAND" = "remove" ]]; then
  remove_app
elif [[ "$COMMAND" = "shortcut" ]]; then
  if [[ -z $APP_NAME ]]; then
    all_app_desktop
  else
    app_desktop
  fi
fi