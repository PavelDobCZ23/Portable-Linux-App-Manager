[General]
# File name of the binary for the app. Slashes can be used to specify file inside a subdirectories.
Bin = BinaryName.AppImage
# Type of app. Use "SingleBin" for single binary app or "BinArchive" for archive with the app inside.
Type = SingleBin
# Select a custom subfolder to extract archived app into. (Only for Type=BinArchive)
#ExtractFolder = SomeFolder
# Modify --strip option of the tar command used to extract archived app. (Only for Type=BinArchive)
#StripArchive = 1
# Remove the executable or the extraction folder before updating.
#RemoveBeforeUpdate = true
# Disable further updates of the app.
#DisableUpdates = false
# Id used to identify the app's meta files in the repo's database.
# Empty means the app is custom and not from the repo's database.
AppId = 
# Use specific version of the software. This may only work with some apps.
# With software from GitHub/GitLab, use a specific tag name.
# Usually with other sources, use version that's part of the downloaded file's name.
# To Be Added!!
#ForceVersion = 0.0.46

[Desktop]
# Custom file name of the desktop file located at ~/.local/share/applications/*
FileName = custom-file-name.desktop
# Icon for the app. Use a custom icon id, absolute or relative path (e.g. ./icon.svg).
# Relative paths are relative to the containing directory of the app.
Icon = empty
# Custom working directory for the app. Absolute or relative path (e.g. ./App).
# Relative paths are relative to the containing directory of the app (where app.conf is located).
#Path = ./MyApp
# Arguments appended after the main executable.
Arguments = %U -q
# Environmental variables placed at the beginning of the value with "env" before them.
EnvVariables = GTK_USE_PORTAL=1 
# Additional commands used as prefix for the main executable.
#PreLaunch = gamemoderun

# This syntax allows for desktop action entries to be specified.
# All entries of [Desktop] except for "FileName" and "Path" are valid here.
[Desktop][Desktop Action Test]
Icon=state-ok
Arguments = --testing